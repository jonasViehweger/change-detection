[project]
name = "disturbancemonitor"
version = "0.1.0"
description = "A package to monitor disturbances in satellite time series in near real time."
requires-python = ">= 3.12"
readme = "README.md"
dependencies = [
  "numpy",
  "rasterio<1.4", # Pinned waiting for https://github.com/rasterio/rasterio/issues/3064 to resolve
  "boto3",
  "toml",
  "authlib",
  "botocore",
  "requests",
  "s3fs",
  "python-dotenv>=1.0.1",
  "geopandas>=1.0.1",
]

[tool.mypy]
ignore_missing_imports = true
disallow_incomplete_defs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
pythonpath = ["src"]

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
disturbancemonitor = ["data/*.cjs"]

[tool.uv]
dev-dependencies = [
    "boto3-stubs>=1.35.10",
    "disturbancemonitor",
    "ipykernel>=6.29.5",
    "mypy>=1.14.1",
    "pre-commit>=3.8.0",
    "pytest>=8.3.4",
    "python-dotenv>=1.0.1",
    "python-openstackclient>=7.2.1",
    "sentinelhub>=3.11.1",
    "types-requests>=2.32.0.20240712",
    "types-toml>=0.10.8.20240310",
]

[tool.uv.sources]
disturbancemonitor = { workspace = true }

[tool.ruff]
line-length = 120
target-version = "py310"
lint.select = [
    "F",   # pyflakes
    "E",   # pycodestyle
    "W",   # pycodestyle
    "C90", # mccabe
    "N",   # naming
    "YTT", # flake-2020
    "B",   # bugbear
    "A",   # built-ins
    "COM", # commas
    "C4",  # comprehensions
    "T10", # debugger statements
    "ISC", # implicit string concatenation
    "ICN", # import conventions
    "G",   # logging format
    "PIE", # flake8-pie
    "T20", # print statements
    "PT",  # pytest style
    "RET", # returns
    "SLF", # private member access
    "SIM", # simplifications
    "ARG", # unused arguments
    "PD",  # pandas
    "PGH", # pygrep hooks (useless noqa comments, eval statements etc.)
    "FLY", # flynt
    "RUF", # ruff rules
    "NPY", # numpy
    "I",   # isort
    "UP",  # pyupgrade
    "FA",  # checks where future import of annotations would make types nicer
]
lint.fixable = [
    "I",     # sort imports
    "F401",  # remove redundant imports
    "UP007", # use new-style union type annotations
    "UP006", # use new-style built-in type annotations
    "UP037", # remove quotes around types when not necessary
    "FA100", # import future annotations where necessary (not autofixable ATM)
]
lint.ignore = [
    "C408",   # complains about `dict()` calls, we use them to avoid too many " in the code
    "SIM117", # wants to always combine `with` statements, gets ugly for us
    "SIM108", # tries to aggresively inline `if`, not always readable
    "A003",   # complains when ATTRIBUTES shadow builtins, we have objects that implement `filter` and such
    "COM812", # trailing comma missing, fights with black
    "PD011",  # suggests `.to_numpy` instead of `.values`, also does this for non-pandas objects...
    # potentially fixable
    "N818",  # we use the 'Exception' suffix but PEP suggests 'Error'
    "B904",  # want `raise ... from None` instead of just `raise ...`
    "B028",  # always demands a stacklevel argument when warning
    "PT011", # complains for `pytest.raises(ValueError)` but we use it a lot
    "UP024", # wants to switch IOError with OSError
    "T201",  # want to print without compalaints
    "ISC001",# complains about implicit string concatenation
]
lint.isort.section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]
fix = true


[tool.nbqa.addopts]
ruff = ["--extend-ignore=E402,T201,B015,B018,NPY002,UP,FA"]
# E402 -> imports on top
# T201 -> print found
# B015 & B018 -> useless expression (used to show values in ipynb)
# NPY002 -> use RNG instead of old numpy.random
# UP -> suggestions for new-style classes (future import might confuse readers)
# FA -> necessary future annotations import
